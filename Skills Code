#include "robot-config.h"

/**bool firing = false;
bool pressed = false;

 
void firingControl() {
    if (!firing) {
        firing = true;
    } 
}
 
int catapultControl() {
    while(1) {
        Controller1.ButtonA.pressed(firingControl);
        
        if (firing && !Controller1.ButtonA.pressing()) {
            firing = false;
        }
        
        if (!Controller1.ButtonA.pressing()) {
            pressed = false;
        }
           
        //moves catapult until it hits the switch or if it is firing
        if (firing || !Controller1.ButtonA.pressing()) {
           Catapult.spin(vex::directionType::rev, 120, vex::velocityUnits::pct);
        }
        
        //when the catapult hits the switch it will move a bit more allowing for the ratchet to catch
       if (!pressed && Controller1.ButtonA.pressing()) {
            Catapult.spin(vex::directionType::fwd, -30, vex::velocityUnits::pct);
            vex::task::sleep(200); //100 for catching on 2nd tooth
            Catapult.stop(vex::brakeType::hold);
            pressed = true;
        }      
    }
    return (0);
}*/

void brake ()
{
    LeftMotor.stop(vex::brakeType::brake);
    RightMotor.stop(vex::brakeType::brake);
    RightMotor2.stop(vex::brakeType::brake);
    Propeller.stop(vex::brakeType::brake);
    Intake.stop(vex::brakeType::brake);
    Catapult.stop(vex::brakeType::brake);
    Intake.stop(vex::brakeType::brake);
    Descorer.stop(vex::brakeType::brake);
    vex::task::sleep(750);
}

void reversecontrols ()
{
    bool standard = false;
    while(standard == false){
        if (Controller1.Axis3.value()< 2 && Controller1.Axis3.value()>-2)
        {
            RightMotor.stop(vex::brakeType::brake);
            RightMotor2.stop(vex::brakeType::brake);
        }
        else
        {
            RightMotor.spin(vex::directionType::rev, (Controller1.Axis3.value())/2, vex::velocityUnits::pct);
            RightMotor2.spin(vex::directionType::rev, (Controller1.Axis3.value())/2, vex::velocityUnits::pct);
        }
        if (Controller1.Axis2.value()< 2 && Controller1.Axis2.value()>-2)
        {
            LeftMotor.stop(vex::brakeType::brake);
            LeftMotor2.stop(vex::brakeType::brake);
        }
        else
        {
            LeftMotor.spin(vex::directionType::rev, (Controller1.Axis2.value())/2, vex::velocityUnits::pct);
            LeftMotor2.spin(vex::directionType::rev, (Controller1.Axis2.value())/2, vex::velocityUnits::pct);
        }
        
        //Spinny
         if (Controller1.ButtonRight.pressing())
        {
            Spinny.spin(vex::directionType::fwd, 240, vex::velocityUnits::pct);
        }
        else if (Controller1.ButtonLeft.pressing())
        {
        Spinny.spin(vex::directionType::rev, 240, vex::velocityUnits::pct);
        }
        else
        {
            Spinny.stop(vex::brakeType::brake);
        }
        
        //Propeller
        if (Controller1.ButtonR2.pressing())
        {
            Propeller.spin(vex::directionType::fwd, -240, vex::velocityUnits::pct);
        }
        else if (Controller1.ButtonR1.pressing())
        {
        Propeller.spin(vex::directionType::fwd, 240, vex::velocityUnits::pct);
        }
        else
        {
            Propeller.stop(vex::brakeType::brake);
        }
        //Intake
      
        if (Controller1.ButtonL2.pressing())
        {
            Intake.spin(vex::directionType::fwd, 240, vex::velocityUnits::pct);
        }
        else if (Controller1.ButtonL1.pressing())
        {
        Intake.spin(vex::directionType::rev, 240, vex::velocityUnits::pct);
        }
        else
        {
            Intake.stop(vex::brakeType::brake);
        }
        
         if (Controller1.ButtonA.pressing())
        {
        Catapult.spin(vex::directionType::rev, 120, vex::velocityUnits::pct);
        }
        else if (Controller1.ButtonB.pressing())
        {
        Catapult.spin(vex::directionType::fwd, 60, vex::velocityUnits::pct);
        }
        else
        { 
            Catapult.stop(vex::brakeType::brake);
        }
        
        if(Controller1.ButtonLeft.pressing()){
            standard = true;
        }
        vex::task::sleep(20);
    }
}

void standardcontrols ()
{
    bool standard = true;
    while(standard == true){
        if (Controller1.Axis3.value()< 2 && Controller1.Axis3.value()>-2)
        {
            LeftMotor.stop(vex::brakeType::brake);
            LeftMotor2.stop(vex::brakeType::brake);
        }
        else
        {
        LeftMotor.spin(vex::directionType::fwd, (Controller1.Axis3.value())/2, vex::velocityUnits::pct);
        LeftMotor2.spin(vex::directionType::fwd, (Controller1.Axis3.value())/2, vex::velocityUnits::pct);
        }
        if (Controller1.Axis2.value()< 2 && Controller1.Axis2.value()>-2)
        {
            RightMotor.stop(vex::brakeType::brake);
            RightMotor2.stop(vex::brakeType::brake);
        }
        else
        {
        RightMotor.spin(vex::directionType::fwd, (Controller1.Axis2.value())/2, vex::velocityUnits::pct);
        RightMotor2.spin(vex::directionType::fwd, (Controller1.Axis2.value())/2, vex::velocityUnits::pct);
        }
        
        //Spinny
         if (Controller1.ButtonRight.pressing())
        {
            Spinny.spin(vex::directionType::fwd, 240, vex::velocityUnits::pct);
        }
        else if (Controller1.ButtonLeft.pressing())
        {
        Spinny.spin(vex::directionType::rev, 240, vex::velocityUnits::pct);
        }
        else
        {
            Spinny.stop(vex::brakeType::brake);
        }
        
        //Propeller
        if (Controller1.ButtonR2.pressing())
        {
            Propeller.spin(vex::directionType::fwd, -240, vex::velocityUnits::pct);
        }
        else if (Controller1.ButtonR1.pressing())
        {
        Propeller.spin(vex::directionType::fwd, 240, vex::velocityUnits::pct);
        }
        else
        {
            Propeller.stop(vex::brakeType::brake);
        }
        //Intake
      
        if (Controller1.ButtonL2.pressing())
        {
            Intake.spin(vex::directionType::fwd, 240, vex::velocityUnits::pct);
        }
        else if (Controller1.ButtonL1.pressing())
        {
        Intake.spin(vex::directionType::rev, 240, vex::velocityUnits::pct);
        }
        else
        {
            Intake.stop(vex::brakeType::brake);
        }
        
         if (Controller1.ButtonA.pressing())
        {
        Catapult.spin(vex::directionType::rev, 120, vex::velocityUnits::pct);
        }
        else if (Controller1.ButtonB.pressing())
        {
        Catapult.spin(vex::directionType::fwd, 60, vex::velocityUnits::pct);
        }
        else
        { 
            Catapult.stop(vex::brakeType::brake);
        }
        
        if(Controller1.ButtonUp.pressing()){
            standard = false;
        }
        vex::task::sleep(20);
    }
}

void doublespeed ()
{
     if (Controller1.Axis3.value()< 2 && Controller1.Axis3.value()>-2)
        {
            LeftMotor.stop(vex::brakeType::brake);
            LeftMotor2.stop(vex::brakeType::brake);
        }
        else
        {
        LeftMotor.spin(vex::directionType::fwd, (Controller1.Axis3.value()), vex::velocityUnits::pct);
        LeftMotor2.spin(vex::directionType::fwd, (Controller1.Axis3.value()), vex::velocityUnits::pct);
        }
        if (Controller1.Axis2.value()< 2 && Controller1.Axis2.value()>-2)
        {
            RightMotor.stop(vex::brakeType::brake);
            RightMotor2.stop(vex::brakeType::brake);
        }
        else
        {
        RightMotor.spin(vex::directionType::fwd, (Controller1.Axis2.value()), vex::velocityUnits::pct);
        RightMotor2.spin(vex::directionType::fwd, (Controller1.Axis2.value()), vex::velocityUnits::pct);
        }
}

void slowspeed ()
{
     if (Controller1.Axis3.value()< 2 && Controller1.Axis3.value()>-2)
        {
            LeftMotor.stop(vex::brakeType::brake);
            LeftMotor2.stop(vex::brakeType::brake);
        }
        else
        {
        LeftMotor.spin(vex::directionType::fwd, (Controller1.Axis3.value())/10, vex::velocityUnits::pct);
        LeftMotor2.spin(vex::directionType::fwd, (Controller1.Axis3.value())/10, vex::velocityUnits::pct);
        }
        if (Controller1.Axis2.value()< 2 && Controller1.Axis2.value()>-2)
        {
            RightMotor.stop(vex::brakeType::brake);
            RightMotor2.stop(vex::brakeType::brake);
        }
        else
        {
        RightMotor.spin(vex::directionType::fwd, (Controller1.Axis2.value())/10, vex::velocityUnits::pct);
        RightMotor2.spin(vex::directionType::fwd, (Controller1.Axis2.value())/10, vex::velocityUnits::pct);
        }
}

void normalspeed()
{
    if (Controller1.Axis3.value()< 2 && Controller1.Axis3.value()>-2)
        {
            LeftMotor.stop(vex::brakeType::brake);
            LeftMotor2.stop(vex::brakeType::brake);
        }
        else
        {
        LeftMotor.spin(vex::directionType::fwd, (Controller1.Axis3.value())/2, vex::velocityUnits::pct);
        LeftMotor2.spin(vex::directionType::fwd, (Controller1.Axis3.value())/2, vex::velocityUnits::pct);
        }
        if (Controller1.Axis2.value()< 2 && Controller1.Axis2.value()>-2)
        {
            RightMotor.stop(vex::brakeType::brake);
            RightMotor2.stop(vex::brakeType::brake);
        }
        else
        {
        RightMotor.spin(vex::directionType::fwd, (Controller1.Axis2.value())/2, vex::velocityUnits::pct);
        RightMotor2.spin(vex::directionType::fwd, (Controller1.Axis2.value())/2, vex::velocityUnits::pct);
        }
}

void driveforward ( )
{
    RightMotor.spin(vex::directionType::fwd,120,vex::velocityUnits::rpm);
    RightMotor2.spin(vex::directionType::fwd,120,vex::velocityUnits::rpm);
    LeftMotor.spin(vex::directionType::fwd,120,vex::velocityUnits::rpm);
    LeftMotor2.spin(vex::directionType::fwd,120,vex::velocityUnits::rpm);
}

void fdrive (int num)
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    RightMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.rotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
}

void fdriveflip (int num)
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    Propeller.resetRotation();
    RightMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    Propeller.rotateTo(-(num*1.5),vex::rotationUnits::deg,180,vex::velocityUnits::rpm);
}

void fdriveplat (int num)
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    Propeller.resetRotation();
    RightMotor.startRotateTo(num,vex::rotationUnits::deg,180,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(num,vex::rotationUnits::deg,180,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(num,vex::rotationUnits::deg,180,vex::velocityUnits::rpm);
    LeftMotor2.startRotateTo(num,vex::rotationUnits::deg,180,vex::velocityUnits::rpm);
    Propeller.rotateTo((num*1.3333333),vex::rotationUnits::deg,240,vex::velocityUnits::rpm);
}

void fdriveintake (int num)
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    Propeller.resetRotation();
    Intake.resetRotation();
    RightMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    Propeller.startRotateTo((num*1.5),vex::rotationUnits::deg,180,vex::velocityUnits::rpm);
    Intake.rotateTo(-(num*2),vex::rotationUnits::deg,240,vex::velocityUnits::rpm);
}

void bdriveintake (int num)
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    Propeller.resetRotation();
    Intake.resetRotation();
    RightMotor.startRotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.startRotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    Propeller.startRotateTo((num*1.5),vex::rotationUnits::deg,180,vex::velocityUnits::rpm);
    Intake.rotateTo(-(num*2),vex::rotationUnits::deg,240,vex::velocityUnits::rpm);
}

void intake (int num)
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    Propeller.resetRotation();
    Intake.resetRotation();
    Propeller.startRotateTo((num*1.5),vex::rotationUnits::deg,180,vex::velocityUnits::rpm);
    Intake.rotateTo(-(num*2),vex::rotationUnits::deg,240,vex::velocityUnits::rpm);
}

void flip (int num)
{
    Propeller.resetRotation();
    Propeller.rotateTo(-num,vex::rotationUnits::deg,240,vex::velocityUnits::rpm);
}

void drivebackwards ()
{
    LeftMotor.spin(vex::directionType::rev,120,vex::velocityUnits::rpm);
    LeftMotor2.spin(vex::directionType::rev,120,vex::velocityUnits::rpm);
    RightMotor.spin(vex::directionType::rev,120,vex::velocityUnits::rpm);
    RightMotor2.spin(vex::directionType::rev,120,vex::velocityUnits::rpm);
}

void bdrive (int num)
{               
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    RightMotor.startRotateTo((num*-1),vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo((num*-1),vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo((num*-1),vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.rotateTo((num*-1),vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
}

void rturn ()
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    LeftMotor.startRotateTo(295,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.startRotateTo(295,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor.startRotateTo(-295,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.rotateTo(-295,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    brake();
}

void rturnX ()
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    LeftMotor.startRotateTo(330,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.startRotateTo(330,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor.startRotateTo(-330,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.rotateTo(-330,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    brake();
}

void lturn ()
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    RightMotor.startRotateTo(295,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(295,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(-295,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.rotateTo(-295,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    brake();
}
           
void lturnX ()
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    RightMotor.startRotateTo(330,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(330,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(-330,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.rotateTo(-330,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    brake();
}

void lturnNum (int num)
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    RightMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.rotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    brake();
}

void rturnNum (int num)
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    RightMotor.startRotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.rotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    brake();
}


void setDriveHold()
{
    RightMotor.setStopping(vex::brakeType::hold);
    RightMotor2.setStopping(vex::brakeType::hold);
    LeftMotor.setStopping(vex::brakeType::hold);
    LeftMotor2.setStopping(vex::brakeType::hold);
}

void retract()
{
    Catapult.resetRotation();
    Catapult.rotateTo(-9300,vex::rotationUnits::deg,480,vex::velocityUnits::pct);
    brake();
}

void retractNum(int num)
{

    Catapult.resetRotation();
    Catapult.rotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::pct);
    brake();
}

void fdriveX (int num)
{
    Catapult.resetRotation();
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    RightMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    Catapult.rotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::pct);
}

void bdriveX (int num)
{              
    Catapult.resetRotation();
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    RightMotor.startRotateTo((num*-1),vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo((num*-1),vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo((num*-1),vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.startRotateTo((num*-1),vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    Catapult.rotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::pct);
}

void fdriveintakeX (int num)
{
    Catapult.resetRotation();
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    Propeller.resetRotation();
    Intake.resetRotation();
    RightMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    Propeller.startRotateTo((num*1.5),vex::rotationUnits::deg,180,vex::velocityUnits::rpm);
    Intake.startRotateTo(-(num*2),vex::rotationUnits::deg,240,vex::velocityUnits::rpm);
    Catapult.rotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::pct);
}

void bdriveintakeX (int num)
{
    Catapult.resetRotation();
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    Propeller.resetRotation();
    Intake.resetRotation();
    RightMotor.startRotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.startRotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    Propeller.startRotateTo((num*1.5),vex::rotationUnits::deg,180,vex::velocityUnits::rpm);
    Intake.startRotateTo(-(num*2),vex::rotationUnits::deg,240,vex::velocityUnits::rpm);
    Catapult.rotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::pct);
}

void fdriveflipX (int num)
{
    Catapult.resetRotation();
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    Propeller.resetRotation();
    RightMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    Propeller.startRotateTo(-(num*1.5),vex::rotationUnits::deg,180,vex::velocityUnits::rpm);
    Catapult.rotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::pct);

}

void fire()
{
    Catapult.spin(vex::directionType::rev, 60, vex::velocityUnits::pct);
    vex::task::sleep(830);
    brake();
}

void fire(int num)
{
    Catapult.spin(vex::directionType::rev, 60, vex::velocityUnits::pct);
    vex::task::sleep(num);
    brake();
}





//                              Autonomous Task                              

void autonomous( void )
{
    //23.416666 inches is length and width of one square
    //33.1161675 is diagonal of one square
    //750 milliseconds is one square length
    //1060 milliseconds is one square diagonal
    //circumference of wheel is 5pi inches
    //500 miliseconds is a 90 degree turn with Right and left opposite direction at 120 revs

    Brain.Screen.print("starting");
    
    bdrive(1400);
    brake();
    fdrive(1000);
    brake();
    fire();
    retract();
    lturnNum(25);
    fdrive(350);
    brake();
    lturn();
    fdriveintake(1225);
    brake();
    intake(100);
    brake();
    //flip(1500);
    //brake();
    bdriveintake(450);
    brake();
    lturnNum(355);
    fdriveflip(700);
    brake();
    rturnNum(350);
    fdrive(680);
    brake();
    rturnNum(310);
    bdrive(750);
    brake();
    fdrive(350);
    brake();
    rturnNum(45);
    intake(800);
    brake();
    fire(900);
    lturnNum(35);  
    
    //CENTER PLAT ROUTE
    fdrive(750);
    brake();
    rturnNum(305);
    fdrive(1000);
    brake();
    lturnNum(305);
    fdrive(1050);
    brake();
    lturnNum(305);
    fdriveplat(2350);
    brake();
          
    //FULL ROUTE
    /**
    lturn();
    retract();
    fdrive(800);
    brake();
    rturn();
    rturn();
    fdriveflip(2000);
    brake();
    bdrive(200);
    brake();
    rturn();
    fdrive(700);
    brake();
    rturn();
    fdriveintake(800);
    brake();
    bdriveintake(800);
    brake();
    fdrive(1700);
    brake();
    bdrive(900);
    brake();
    fire();
    lturnNum(25);
    bdrive(700);
    brake();
    rturn();
    fdrive(700);
    brake();
    rturn();
    fdrive(700);
    brake();
    rturn();
    fdriveplat(1700);
    brake();
    */
}
void usercontrol( void ) 
{
    Brain.Screen.print("Tank Control Program Started");
   

    while(1) 
    {
        
         if (Controller1.Axis3.value()< 2 && Controller1.Axis3.value()>-2)
        {
            LeftMotor.stop(vex::brakeType::brake);
            LeftMotor2.stop(vex::brakeType::brake);
        }
        else
        {
        LeftMotor.spin(vex::directionType::fwd, (Controller1.Axis3.value())/2, vex::velocityUnits::pct);
        LeftMotor2.spin(vex::directionType::fwd, (Controller1.Axis3.value())/2, vex::velocityUnits::pct);
        }
        if (Controller1.Axis2.value()< 2 && Controller1.Axis2.value()>-2)
        {
            RightMotor.stop(vex::brakeType::brake);
            RightMotor2.stop(vex::brakeType::brake);
        }
        else
        {
        RightMotor.spin(vex::directionType::fwd, (Controller1.Axis2.value())/2, vex::velocityUnits::pct);
        RightMotor2.spin(vex::directionType::fwd, (Controller1.Axis2.value())/2, vex::velocityUnits::pct);
        }
        

        //Reverse Stuff
        if(Controller1.ButtonLeft.pressing()){
            standardcontrols();
        }
        else if(Controller1.ButtonUp.pressing()){
            reversecontrols();
            
        }
        // Controller1.ButtonUp.pressed(reversecontrols);
        // Controller1.ButtonLeft.pressed(standardcontrols);
        
        
        //Spinny
         if (Controller1.ButtonRight.pressing())
        {
            Spinny.spin(vex::directionType::fwd, 240, vex::velocityUnits::pct);
        }
        else if (Controller1.ButtonLeft.pressing())
        {
        Spinny.spin(vex::directionType::rev, 240, vex::velocityUnits::pct);
        }
        else
        {
            Spinny.stop(vex::brakeType::brake);
        }
        
        //Propeller
        if (Controller1.ButtonR2.pressing())
        {
            Propeller.spin(vex::directionType::fwd, -240, vex::velocityUnits::pct);
        }
        else if (Controller1.ButtonR1.pressing())
        {
        Propeller.spin(vex::directionType::fwd, 240, vex::velocityUnits::pct);
        }
        else
        {
            Propeller.stop(vex::brakeType::brake);
        }
        //Intake
      
        if (Controller1.ButtonL2.pressing())
        {
            Intake.spin(vex::directionType::fwd, 240, vex::velocityUnits::pct);
        }
        else if (Controller1.ButtonL1.pressing())
        {
        Intake.spin(vex::directionType::rev, 240, vex::velocityUnits::pct);
        }
        else
        {
            Intake.stop(vex::brakeType::brake);
        }
        
         if (Controller1.ButtonA.pressing())
        {
        Catapult.spin(vex::directionType::rev, 120, vex::velocityUnits::pct);
        }
        else if (Controller1.ButtonB.pressing())
        {
        Catapult.spin(vex::directionType::fwd, 60, vex::velocityUnits::pct);
        }
        else
        { 
            Catapult.stop(vex::brakeType::brake);
        }
                             vex::task::sleep(20); //Sleep the task for a short amount of time to prevent wasted resources.
        
    }
    
}
    
// Main will set up the competition functions and callbacks.

int main()
{
    autonomous(  );
    Competition.drivercontrol( usercontrol );
    Controller1.ButtonUp.pressed(reversecontrols);
    Controller1.ButtonLeft.pressed(standardcontrols);
    
    //Controller1.ButtonDown.pressed(setDriveHold);
    //Controller1.ButtonRight.pressed(doublespeed);
    //Controller1.ButtonLeft.pressed(slowspeed);
    //Controller1.ButtonUp.pressed(normalspeed);
    
 //Prevent main from exiting with an infinite loop.                        
    
    //Create an infinite loop so that the program can pull remote control values every iteration.
    //This loop causes the program to run forever.
    while(1)
    {
         vex::task::sleep(20); //Sleep the task for a short amount of time to prevent wasted resources.
    }
}
