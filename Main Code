#include "robot-config.h"

bool firing = false;
bool pressed = false;

void fire()
{
    Catapult.spin(vex::directionType::rev, 60, vex::velocityUnits::pct);
    vex::task::sleep(500);
}


 
void firingControl() {
    if (!firing) {
        firing = true;
    } 
}
 
int catapultControl() {
    while(1) {
        Controller1.ButtonA.pressed(firingControl);
        
        if (firing && !catapultLimit.pressing()) {
            firing = false;
        }
        
        if (!catapultLimit.pressing()) {
            pressed = false;
        }
           
        //moves catapult until it hits the switch or if it is firing
        if (firing || !catapultLimit.pressing()) {
           Catapult.spin(vex::directionType::fwd, -70, vex::velocityUnits::pct);
        }
        
        //when the catapult hits the switch it will move a bit more allowing for the ratchet to catch
       if (!pressed && catapultLimit.pressing()) {
            /*Catapult.spin(vex::directionType::fwd, -30, vex::velocityUnits::pct);
            vex::task::sleep(200); //100 for catching on 2nd tooth*/
            Catapult.stop(vex::brakeType::hold);
            pressed = true;
        }      
    }
    return (0);
}
 

void brake ()
{
    LeftMotor.stop(vex::brakeType::brake);
    RightMotor.stop(vex::brakeType::brake);
    RightMotor2.stop(vex::brakeType::brake);
    Propeller.stop(vex::brakeType::brake);
    Intake.stop(vex::brakeType::brake);
    Catapult.stop(vex::brakeType::brake);
    Intake.stop(vex::brakeType::brake);
    Descorer.stop(vex::brakeType::brake);
    vex::task::sleep(750);
}


void doublespeed ()
{
     if (Controller1.Axis3.value()< 2 && Controller1.Axis3.value()>-2)
        {
            LeftMotor.stop(vex::brakeType::brake);
            LeftMotor2.stop(vex::brakeType::brake);
        }
        else
        {
        LeftMotor.spin(vex::directionType::fwd, (Controller1.Axis3.value()), vex::velocityUnits::pct);
        LeftMotor2.spin(vex::directionType::fwd, (Controller1.Axis3.value()), vex::velocityUnits::pct);
        }
        if (Controller1.Axis2.value()< 2 && Controller1.Axis2.value()>-2)
        {
            RightMotor.stop(vex::brakeType::brake);
            RightMotor2.stop(vex::brakeType::brake);
        }
        else
        {
        RightMotor.spin(vex::directionType::fwd, (Controller1.Axis2.value()), vex::velocityUnits::pct);
        RightMotor2.spin(vex::directionType::fwd, (Controller1.Axis2.value()), vex::velocityUnits::pct);
        }
}

void slowspeed ()
{
     if (Controller1.Axis3.value()< 2 && Controller1.Axis3.value()>-2)
        {
            LeftMotor.stop(vex::brakeType::brake);
            LeftMotor2.stop(vex::brakeType::brake);
        }
        else
        {
        LeftMotor.spin(vex::directionType::fwd, (Controller1.Axis3.value())/10, vex::velocityUnits::pct);
        LeftMotor2.spin(vex::directionType::fwd, (Controller1.Axis3.value())/10, vex::velocityUnits::pct);
        }
        if (Controller1.Axis2.value()< 2 && Controller1.Axis2.value()>-2)
        {
            RightMotor.stop(vex::brakeType::brake);
            RightMotor2.stop(vex::brakeType::brake);
        }
        else
        {
        RightMotor.spin(vex::directionType::fwd, (Controller1.Axis2.value())/10, vex::velocityUnits::pct);
        RightMotor2.spin(vex::directionType::fwd, (Controller1.Axis2.value())/10, vex::velocityUnits::pct);
        }
}

void normalspeed()
{
    if (Controller1.Axis3.value()< 2 && Controller1.Axis3.value()>-2)
        {
            LeftMotor.stop(vex::brakeType::brake);
            LeftMotor2.stop(vex::brakeType::brake);
        }
        else
        {
        LeftMotor.spin(vex::directionType::fwd, (Controller1.Axis3.value())/2, vex::velocityUnits::pct);
        LeftMotor2.spin(vex::directionType::fwd, (Controller1.Axis3.value())/2, vex::velocityUnits::pct);
        }
        if (Controller1.Axis2.value()< 2 && Controller1.Axis2.value()>-2)
        {
            RightMotor.stop(vex::brakeType::brake);
            RightMotor2.stop(vex::brakeType::brake);
        }
        else
        {
        RightMotor.spin(vex::directionType::fwd, (Controller1.Axis2.value())/2, vex::velocityUnits::pct);
        RightMotor2.spin(vex::directionType::fwd, (Controller1.Axis2.value())/2, vex::velocityUnits::pct);
        }
}


void driveforward ( )
{
    RightMotor.spin(vex::directionType::fwd,120,vex::velocityUnits::rpm);
    RightMotor2.spin(vex::directionType::fwd,120,vex::velocityUnits::rpm);
    LeftMotor.spin(vex::directionType::fwd,120,vex::velocityUnits::rpm);
    LeftMotor2.spin(vex::directionType::fwd,120,vex::velocityUnits::rpm);
}

void fdrive (int num)
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    RightMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.rotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
}

void fdriveflip (int num)
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    Propeller.resetRotation();
    RightMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    Propeller.rotateTo(-(num*1.5),vex::rotationUnits::deg,180,vex::velocityUnits::rpm);
}

void fdriveplat (int num)
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    Propeller.resetRotation();
    RightMotor.startRotateTo(num,vex::rotationUnits::deg,180,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(num,vex::rotationUnits::deg,180,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(num,vex::rotationUnits::deg,180,vex::velocityUnits::rpm);
    LeftMotor2.startRotateTo(num,vex::rotationUnits::deg,180,vex::velocityUnits::rpm);
    Propeller.rotateTo((num*1.3333333),vex::rotationUnits::deg,240,vex::velocityUnits::rpm);
}

void drivebackwards ()
{
    LeftMotor.spin(vex::directionType::rev,120,vex::velocityUnits::rpm);
    LeftMotor2.spin(vex::directionType::rev,120,vex::velocityUnits::rpm);
    RightMotor.spin(vex::directionType::rev,120,vex::velocityUnits::rpm);
    RightMotor2.spin(vex::directionType::rev,120,vex::velocityUnits::rpm);
}

void bdrive (int num)
{               
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    RightMotor.startRotateTo((num*-1),vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo((num*-1),vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo((num*-1),vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.rotateTo((num*-1),vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
}

void rturn ()
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    LeftMotor.startRotateTo(295,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.startRotateTo(295,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor.startRotateTo(-295,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.rotateTo(-295,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    brake();
}

void lturn ()
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    RightMotor.startRotateTo(295,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(295,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(-295,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.rotateTo(-295,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    brake();
}
                   
void lturnNum (int num)
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    RightMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.rotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    brake();
}

void rturnNum (int num)
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    RightMotor.startRotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.rotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    brake();
}


void turnright ( )
{
    RightMotor.spin(vex::directionType::rev,120,vex::velocityUnits::rpm);
    RightMotor2.spin(vex::directionType::rev,120,vex::velocityUnits::rpm);
    LeftMotor.spin(vex::directionType::fwd,120,vex::velocityUnits::rpm);
    LeftMotor2.spin(vex::directionType::fwd,120,vex::velocityUnits::rpm);
    vex::task::sleep(490);
    brake();
}

void turnleft ( )
{
    RightMotor.spin(vex::directionType::fwd,120,vex::velocityUnits::rpm);
    RightMotor2.spin(vex::directionType::fwd,120,vex::velocityUnits::rpm);
    LeftMotor.spin(vex::directionType::rev,120,vex::velocityUnits::rpm);
    LeftMotor2.spin(vex::directionType::rev, 120,vex::velocityUnits::rpm);
    vex::task::sleep(490);
    brake();
}

void customleft (int time)
{
    RightMotor.spin(vex::directionType::fwd,120,vex::velocityUnits::rpm);
    RightMotor2.spin(vex::directionType::fwd,120,vex::velocityUnits::rpm);
    LeftMotor.spin(vex::directionType::rev,120,vex::velocityUnits::rpm);
    LeftMotor2.spin(vex::directionType::rev, 120,vex::velocityUnits::rpm);
    vex::task::sleep(time);
    brake();
}

void customright (int time)
{
    RightMotor.spin(vex::directionType::rev,120,vex::velocityUnits::rpm);
    RightMotor2.spin(vex::directionType::rev,120,vex::velocityUnits::rpm);
    LeftMotor.spin(vex::directionType::fwd,120,vex::velocityUnits::rpm);
    LeftMotor2.spin(vex::directionType::fwd, 120,vex::velocityUnits::rpm);
    vex::task::sleep(time);
    brake();
}

void setDriveHold()
{
    RightMotor.setStopping(vex::brakeType::hold);
    RightMotor2.setStopping(vex::brakeType::hold);
    LeftMotor.setStopping(vex::brakeType::hold);
    LeftMotor2.setStopping(vex::brakeType::hold);
}

void retractAndFire()
{
    Catapult.spin(vex::directionType::fwd, 60, vex::velocityUnits::pct);
    vex::task::sleep(3000);
}


 




//                              Autonomous Task                              

void autonomous( void )
{
    //23.416666 inches is length and width of one square
    //33.1161675 is diagonal of one square
    //750 milliseconds is one square length
    //1060 milliseconds is one square diagonal
    //circumference of wheel is 5pi inches
    //500 miliseconds is a 90 degree turn with Right and left opposite direction at 120 revs

    Brain.Screen.print("starting");
   /** 
    //NEW RED FLAG
    fire();
    brake();
    bdrive(650);
    brake();
    fire();
    brake();
    lturnNum(40);
    bdrive(730);
    brake();
    fdrive(690);
    brake();
    lturn();
    fdriveflip(850);
    brake();
    fdrive(120);
    brake();
    rturn();
    fdriveplat(1575);
    brake();
    */
    
    //NEW BLUE FLAG
    
    fire();
    brake();
    rturnNum(25);
    bdrive(1340);
    brake();
    fdrive(690);
    brake();
    rturn();
    bdrive(200);
    brake();
    fdriveflip(850);
    fdrive(650);
    brake();
    rturn();
    fdrive(850);
    brake();
    bdrive(850);
    brake();
    rturn();
    fdrive(400);
    brake();
    rturn();
    fdriveplat(1575);/**
    fdrive(140);
    brake();
    lturn();
    fdriveplat(1575);
    brake();
    */
  
    //NEW BLUE SIMPLE
    /**
    fdrive(600);
    brake();
   brake();
    rturn();
    brake();
    fdriveflip (1375);
    brake();
    bdrive(475);
    brake();
    rturn();
    fdriveplat(1550);
    brake();
    */
    
    
    //NEW RED SIMPLE
    /**
    fdrive(600);
    brake();
    brake();
    lturn();
    brake();
    fdriveflip (1375);
    brake();
    brake();
    bdrive(560);
    brake();
    brake();
    lturn();
    fdriveplat(1525);
    brake();
    */
    
    //AUTONOMOUS Blue Flag
    
    //Catapult.spin(vex::directionType::rev,60,vex::velocityUnits::rpm);
    //vex::task::sleep(5000);
    /**
    bdrive(1380);
    brake();
    fdrive(690);
    brake();
    rturn();
    fdriveflip(850);
    brake();
    bdrive(850);
    brake();
    lturn();
    fdrive(1500);
    brake();
    rturn();
    fdriveplat(140);
    brake();*/

    
    //AUTONOMOUS Red Flag
/**
   
    bdrive(1380);
    brake();
    fdrive(690);
    brake();
    lturn();
    fdriveflip(850);
    fdrive(125);
    brake();
    brake();
    rturn();
    fdriveplat(1510);
    brake();
*/
    
    //AUTONOMOUS Blue Simple
   /**
    bdrive(650);
    brake();
    lturn();
    fdriveflip(1350);
    brake();
    bdrive(330);
    brake();
    brake();
    rturn();
    fdriveplat(1350);
    brake();
*/
    //AUTONOMOUS Red Simple
/**
    bdrive(650);
    brake();
    rturn();
    fdriveflip (1350);
    brake();
    bdrive(330);
    brake();
    lturn();
    fdriveplat(1350);
    brake();
    */
}
void usercontrol( void ) 
{
    Brain.Screen.print("Tank Control Program Started");
   //catapult control using limit switch with a sleep (look at method)
    vex::task c(catapultControl);


    while(1) 
    {
         if (Controller1.Axis3.value()< 2 && Controller1.Axis3.value()>-2)
        {
            LeftMotor.stop(vex::brakeType::brake);
            LeftMotor2.stop(vex::brakeType::brake);
        }
        else
        {
        LeftMotor.spin(vex::directionType::fwd, (Controller1.Axis3.value())/1.6, vex::velocityUnits::pct);
        LeftMotor2.spin(vex::directionType::fwd, (Controller1.Axis3.value())/1.6, vex::velocityUnits::pct);
        }
        if (Controller1.Axis2.value()< 2 && Controller1.Axis2.value()>-2)
        {
            RightMotor.stop(vex::brakeType::brake);
            RightMotor2.stop(vex::brakeType::brake);
        }
        else
        {
        RightMotor.spin(vex::directionType::fwd, (Controller1.Axis2.value())/1.6, vex::velocityUnits::pct);
        RightMotor2.spin(vex::directionType::fwd, (Controller1.Axis2.value())/1.6, vex::velocityUnits::pct);

        }

        //Brake
         if (Controller1.ButtonDown.pressing())
        {
            setDriveHold();
        }
        
        //Spinny
         if (Controller1.ButtonRight.pressing())
        {
            Spinny.spin(vex::directionType::fwd, 240, vex::velocityUnits::pct);
        }
        else if (Controller1.ButtonLeft.pressing())
        {
        Spinny.spin(vex::directionType::rev, 240, vex::velocityUnits::pct);
        }
        else
        {
            Spinny.stop(vex::brakeType::brake);
        }
        
        //Propeller
        if (Controller1.ButtonR2.pressing())
        {
            Propeller.spin(vex::directionType::fwd, -240, vex::velocityUnits::pct);
        }
        else if (Controller1.ButtonR1.pressing())
        {
        Propeller.spin(vex::directionType::fwd, 240, vex::velocityUnits::pct);
        }
        else
        {
            Propeller.stop(vex::brakeType::brake);
        }
        //Intake
      
        if (Controller1.ButtonL1.pressing())
        {
            Intake.spin(vex::directionType::fwd, 240, vex::velocityUnits::pct);
        }
        else if (Controller1.ButtonL2.pressing())
        {
        Intake.spin(vex::directionType::rev, 240, vex::velocityUnits::pct);
        }
        else
        {
            Intake.stop(vex::brakeType::brake);
        }
        //Catapult
         /*if (Controller1.ButtonA.pressing())
        {
        Catapult.spin(vex::directionType::rev, 60, vex::velocityUnits::pct);
        }
        else if (Controller1.ButtonB.pressing())
        {
        Catapult.spin(vex::directionType::fwd, 60, vex::velocityUnits::pct);
        }
        else
        { 
            Catapult.stop(vex::brakeType::brake);
        }*/
        
        //Descorer
        if (Controller1.ButtonY.pressing())
        {
            Descorer.spin(vex::directionType::fwd, 240, vex::velocityUnits::pct);
        }
        else if (Controller1.ButtonX.pressing())
        {
              Descorer.spin(vex::directionType::rev, 240, vex::velocityUnits::pct);
        }
        else
        {
            Descorer.stop(vex::brakeType::brake);
        }
        
                             vex::task::sleep(20); //Sleep the task for a short amount of time to prevent wasted resources.
    }
    
}
    
// Main will set up the competition functions and callbacks.

int main()
{
    autonomous(  );
    Competition.drivercontrol( usercontrol );
    Controller1.ButtonDown.pressed(setDriveHold);
    Controller1.ButtonRight.pressed(doublespeed);
    Controller1.ButtonLeft.pressed(slowspeed);
    Controller1.ButtonUp.pressed(normalspeed);

 //Prevent main from exiting with an infinite loop.                        
    
    //Create an infinite loop so that the program can pull remote control values every iteration.
    //This loop causes the program to run forever.
    while(1)
    {
       
                             vex::task::sleep(20); //Sleep the task for a short amount of time to prevent wasted resources.
    }
}
