#include "robot-config.h"

void brake ()
{
    LeftMotor.stop(vex::brakeType::brake);
    LeftMotor2.stop(vex::brakeType::brake);
    RightMotor.stop(vex::brakeType::brake);
    RightMotor2.stop(vex::brakeType::brake);
    Propeller.stop(vex::brakeType::brake);
    Intake.stop(vex::brakeType::brake);
    Puncher.stop(vex::brakeType::brake);

}

void fdrive (int num)
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    RightMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.rotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
}

void fdriveflip (int num)
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    Propeller.resetRotation();
    RightMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    Propeller.rotateTo(-(num*1.5),vex::rotationUnits::deg,180,vex::velocityUnits::rpm);
}

void fdriveplat (int num)
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    Propeller.resetRotation();
    RightMotor.startRotateTo(num,vex::rotationUnits::deg,180,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(num,vex::rotationUnits::deg,180,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(num,vex::rotationUnits::deg,180,vex::velocityUnits::rpm);
    LeftMotor2.startRotateTo(num,vex::rotationUnits::deg,180,vex::velocityUnits::rpm);
    Propeller.rotateTo((num*1.3333333),vex::rotationUnits::deg,240,vex::velocityUnits::rpm);
}

void fdriveintake (int num)
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    Propeller.resetRotation();
    Intake.resetRotation();
    RightMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    Propeller.startRotateTo((num*1.5),vex::rotationUnits::deg,180,vex::velocityUnits::rpm);
    Intake.rotateTo(-(num*2),vex::rotationUnits::deg,240,vex::velocityUnits::rpm);
}

void bdriveintake (int num)
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    Propeller.resetRotation();
    Intake.resetRotation();
    RightMotor.startRotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.startRotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    Propeller.startRotateTo((num*1.5),vex::rotationUnits::deg,180,vex::velocityUnits::rpm);
    Intake.rotateTo(-(num*2),vex::rotationUnits::deg,240,vex::velocityUnits::rpm);
}

void intake (int num)
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    Propeller.resetRotation();
    Intake.resetRotation();
    Propeller.startRotateTo((num*1.5),vex::rotationUnits::deg,180,vex::velocityUnits::rpm);
    Intake.rotateTo(-(num*2),vex::rotationUnits::deg,240,vex::velocityUnits::rpm);
}

void flip (int num)
{
    Propeller.resetRotation();
    Propeller.rotateTo(-num,vex::rotationUnits::deg,240,vex::velocityUnits::rpm);
}


void bdrive (int num)
{               
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    RightMotor.startRotateTo((num*-1),vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo((num*-1),vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo((num*-1),vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.rotateTo((num*-1),vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
}

void rturn ()
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    LeftMotor.startRotateTo(295,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.startRotateTo(295,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor.startRotateTo(-295,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.rotateTo(-295,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    brake();
}

void lturn ()
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    RightMotor.startRotateTo(295,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(295,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(-295,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.rotateTo(-295,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    brake();
}

void lturnNum (int num)
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    RightMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.rotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    brake();
}

void rturnNum (int num)
{
    LeftMotor.resetRotation();
    LeftMotor2.resetRotation();
    RightMotor.resetRotation();
    RightMotor2.resetRotation();
    RightMotor.startRotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    RightMotor2.startRotateTo(-num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor.startRotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    LeftMotor2.rotateTo(num,vex::rotationUnits::deg,120,vex::velocityUnits::rpm);
    brake();
}


void setDriveHold()
{
    RightMotor.setStopping(vex::brakeType::hold);
    RightMotor2.setStopping(vex::brakeType::hold);
    LeftMotor.setStopping(vex::brakeType::hold);
    LeftMotor2.setStopping(vex::brakeType::hold);
}

void fire()
{
    Puncher.spin(vex::directionType::rev, 60, vex::velocityUnits::pct);
    vex::task::sleep(830);
    brake();
}

void fire(int num)
{
    Puncher.spin(vex::directionType::rev, 60, vex::velocityUnits::pct);
    vex::task::sleep(num);
    brake();
}


//                              Autonomous Task                              

void autonomous( void )
{
    //23.416666 inches is length and width of one square
    //33.1161675 is diagonal of one square
    //750 milliseconds is one square length
    //1060 milliseconds is one square diagonal
    //circumference of wheel is 5pi inches
    //500 miliseconds is a 90 degree turn with Right and left opposite direction at 120 revs

    Brain.Screen.print("starting");
   

    
}
void usercontrol( void ) 
{
    Brain.Screen.print("Tank Control Program Started");

     while(1) 
     {
        if (Controller1.Axis3.value()>-2 && Controller1.Axis3.value()<2)
        {
            LeftMotor.stop(vex::brakeType::brake);
            LeftMotor2.stop(vex::brakeType::brake);
        }
         else
         {
            LeftMotor.spin(vex::directionType::fwd, (Controller1.Axis3.value())*0.75, vex::velocityUnits::pct);
            LeftMotor2.spin(vex::directionType::fwd, (Controller1.Axis3.value())*0.75, vex::velocityUnits::pct);
         }
         if(Controller1.Axis2.value()>-2 && Controller1.Axis2.value()<2)
         {
             RightMotor.stop (vex::brakeType::brake);
             RightMotor2.stop (vex::brakeType::brake);
         }
         else
         {
            RightMotor.spin(vex::directionType::fwd, (Controller1.Axis2.value())*0.75, vex::velocityUnits::pct);
            RightMotor2.spin(vex::directionType::fwd, (Controller1.Axis2.value())*0.75, vex::velocityUnits::pct);
         }
        
        
        //Propeller
        if (Controller1.ButtonR2.pressing())
        {
            Propeller.spin(vex::directionType::fwd, -240, vex::velocityUnits::pct);
        }
        else if (Controller1.ButtonR1.pressing())
        {
        Propeller.spin(vex::directionType::fwd, 240, vex::velocityUnits::pct);
        }
        else
        {
            Propeller.stop(vex::brakeType::brake);
        }
        //Intake
      
        if (Controller1.ButtonL1.pressing())
        {
            Intake.spin(vex::directionType::fwd, 240, vex::velocityUnits::pct);
        }
        else if (Controller1.ButtonL2.pressing())
        {
        Intake.spin(vex::directionType::rev, 240, vex::velocityUnits::pct);
        }
        else
        {
            Intake.stop(vex::brakeType::brake);
        }
        
        //Puncher
         
         if (Controller1.ButtonA.pressing())
        {
           Puncher.spin(vex::directionType::rev, 120, vex::velocityUnits::pct);
        }
       
        else if (Controller1.ButtonB.pressing())
        { 
           Puncher.spin(vex::directionType::fwd, 120, vex::velocityUnits::pct);
        }
         else
         {
             Puncher.stop(vex::brakeType::brake);
         }
         
        
        
                             vex::task::sleep(20); //Sleep the task for a short amount of time to prevent wasted resources.
        
    }
    
    
}
    
// Main will set up the competition functions and callbacks.

int main()
{
    Competition.autonomous(autonomous);
    Competition.drivercontrol( usercontrol );


    
    
 //Prevent main from exiting with an infinite loop.                        
    
    //Create an infinite loop so that the program can pull remote control values every iteration.
    //This loop causes the program to run forever.
    while(1)
    {
       
                             vex::task::sleep(20); //Sleep the task for a short amount of time to prevent wasted resources.
    }
}
